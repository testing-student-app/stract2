{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
        "AsarOptions": {
            "additionalProperties": false,
            "properties": {
                "ordering": {
                    "type": "string"
                },
                "unpack": {
                    "type": "string"
                },
                "unpackDir": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Downloader<any>": {
            "additionalProperties": false,
            "type": "object"
        },
        "ElectronDownloadRequestOptions": {
            "additionalProperties": false,
            "properties": {
                "cacheRoot": {
                    "description": "The directory that caches Electron artifact downloads.\n\nThe default value is dependent upon the host platform:\n\n* Linux: `$XDG_CACHE_HOME` or `~/.cache/electron/`\n* MacOS: `~/Library/Caches/electron/`\n* Windows: `%LOCALAPPDATA%/electron/Cache` or `~/AppData/Local/electron/Cache/`",
                    "type": "string"
                },
                "downloadOptions": {
                    "description": "Options passed to the downloader module."
                },
                "downloader": {
                    "$ref": "#/definitions/Downloader<any>",
                    "description": "The custom [[Downloader]] class used to download artifacts. Defaults to the\nbuilt-in [[GotDownloader]]."                },
                "force": {
                    "description": "Whether to download an artifact regardless of whether it's in the cache directory.\n\nDefaults to `false`.",
                    "type": "boolean"
                },
                "mirrorOptions": {
                    "$ref": "#/definitions/MirrorOptions",
                    "description": "Options related to specifying an artifact mirror."
                },
                "tempDirectory": {
                    "description": "A temporary directory for downloads.\nIt is used before artifacts are put into cache.",
                    "type": "string"
                },
                "unsafelyDisableChecksums": {
                    "description": "When set to `true`, disables checking that the artifact download completed successfully\nwith the correct payload.\n\nDefaults to `false`.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ElectronOsXSignOptions": {
            "additionalProperties": false,
            "properties": {
                "entitlements": {
                    "type": "string"
                },
                "entitlements-inherit": {
                    "type": "string"
                },
                "gatekeeper-assess": {
                    "type": "boolean"
                },
                "hardenedRuntime": {
                    "type": "boolean"
                },
                "identity": {
                    "anyOf": [
                        {
                            "enum": [
                                true
                            ],
                            "type": "boolean"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "identity-validation": {
                    "type": "boolean"
                },
                "ignore": {
                    "type": "string"
                },
                "keychain": {
                    "type": "string"
                },
                "pre-auto-entitlements": {
                    "type": "boolean"
                },
                "pre-embed-provisioning-profile": {
                    "type": "boolean"
                },
                "provisioning-profile": {
                    "type": "string"
                },
                "requirements": {
                    "type": "string"
                },
                "signature-size": {
                    "type": "number"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MirrorOptions": {
            "additionalProperties": false,
            "properties": {
                "customDir": {
                    "type": "string"
                },
                "customFilename": {
                    "type": "string"
                },
                "mirror": {
                    "type": "string"
                },
                "nightly_mirror": {
                    "description": "The Electron nightly-specific mirror URL.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Pick<NotarizeStartOptions,\"appleId\"|\"appleIdPassword\"|\"ascProvider\">": {
            "additionalProperties": false,
            "properties": {
                "appleId": {
                    "type": "string"
                },
                "appleIdPassword": {
                    "type": "string"
                },
                "ascProvider": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RegExp": {
            "additionalProperties": false,
            "properties": {
                "dotAll": {
                    "description": "Returns a Boolean value indicating the state of the dotAll flag (s) used with a regular expression.\nDefault is false. Read-only.",
                    "type": "boolean"
                },
                "flags": {
                    "description": "Returns a string indicating the flags of the regular expression in question. This field is read-only.\nThe characters in this string are sequenced and concatenated in the following order:\n\n    - \"g\" for global\n    - \"i\" for ignoreCase\n    - \"m\" for multiline\n    - \"u\" for unicode\n    - \"y\" for sticky\n\nIf no flags are set, the value is the empty string.",
                    "type": "string"
                },
                "global": {
                    "description": "Returns a Boolean value indicating the state of the global flag (g) used with a regular expression. Default is false. Read-only.",
                    "type": "boolean"
                },
                "ignoreCase": {
                    "description": "Returns a Boolean value indicating the state of the ignoreCase flag (i) used with a regular expression. Default is false. Read-only.",
                    "type": "boolean"
                },
                "lastIndex": {
                    "type": "number"
                },
                "multiline": {
                    "description": "Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression. Default is false. Read-only.",
                    "type": "boolean"
                },
                "source": {
                    "description": "Returns a copy of the text of the regular expression pattern. Read-only. The regExp argument is a Regular expression object. It can be a variable name or a literal.",
                    "type": "string"
                },
                "sticky": {
                    "description": "Returns a Boolean value indicating the state of the sticky flag (y) used with a regular\nexpression. Default is false. Read-only.",
                    "type": "boolean"
                },
                "unicode": {
                    "description": "Returns a Boolean value indicating the state of the Unicode flag (u) used with a regular\nexpression. Default is false. Read-only.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "Win32Metadata": {
            "additionalProperties": false,
            "description": "Object (also known as a \"hash\") of application metadata to embed into the executable",
            "properties": {
                "CompanyName": {
                    "type": "string"
                },
                "FileDescription": {
                    "type": "string"
                },
                "InternalName": {
                    "type": "string"
                },
                "OriginalFilename": {
                    "type": "string"
                },
                "ProductName": {
                    "type": "string"
                },
                "application-manifest": {
                    "type": "string"
                },
                "requested-execution-level": {
                    "enum": [
                        "asInvoker",
                        "highestAvailable",
                        "requireAdministrator"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "electronPackager.platform": {
            "enum": [
                "all",
                "darwin",
                "linux",
                "mas",
                "win32"
            ],
            "type": "string"
        }
    },
    "description": "Electron-packager Options.",
    "properties": {
        "all": {
            "description": "Shortcut for `--arch=all --platform=all`.",
            "type": "boolean"
        },
        "appBundleId": {
            "description": "The bundle identifier to use in the application's plist.",
            "type": "string"
        },
        "appCategoryType": {
            "description": "The application category type, as shown in the Finder via View â†’ Arrange by Application Category when viewing the Applications directory.",
            "type": "string"
        },
        "appCopyright": {
            "description": "The human-readable copyright line for the app. Maps to the LegalCopyright metadata property on Windows, and NSHumanReadableCopyright on OS X.",
            "type": "string"
        },
        "appVersion": {
            "description": "The release version of the application. By default the version property in the package.json is used but it can be overridden with this argument.\nIf neither are provided, the version of Electron will be used. Maps to the ProductVersion metadata property on Windows, and CFBundleShortVersionString on OS X.",
            "type": "string"
        },
        "arch": {
            "anyOf": [
                {
                    "items": {
                        "enum": [
                            "all",
                            "arm64",
                            "armv7l",
                            "ia32",
                            "mips64el",
                            "x64"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                {
                    "enum": [
                        "all",
                        "arm64",
                        "armv7l",
                        "ia32",
                        "mips64el",
                        "x64"
                    ],
                    "type": "string"
                }
            ],
            "description": "The target system architecture(s) to build for. Not required if the all option is set.\nIf arch is set to all, all supported architectures for the target platforms specified by platform will be built.\nArbitrary combinations of individual architectures are also supported via a comma-delimited string or array of strings.\nThe non-all values correspond to the architecture names used by Electron releases. This value is not restricted to the official set if download.mirror is set."
        },
        "asar": {
            "anyOf": [
                {
                    "$ref": "#/definitions/AsarOptions"
                },
                {
                    "type": "boolean"
                }
            ],
            "description": "Whether to package the application's source code into an archive, using Electron's archive format"
        },
        "buildVersion": {
            "description": "The build version of the application. Defaults to the value of appVersion.\nMaps to the FileVersion metadata property on Windows, and CFBundleVersion on OS X.",
            "type": "string"
        },
        "darwinDarkModeSupport": {
            "description": "Forces support for Mojave (macOS 10.14) dark mode in the packaged app.",
            "type": "boolean"
        },
        "derefSymlinks": {
            "description": "Whether symlinks should be dereferenced during the copying of the application source.",
            "type": "boolean"
        },
        "dir": {
            "description": "The source directory.",
            "type": "string"
        },
        "download": {
            "$ref": "#/definitions/ElectronDownloadRequestOptions",
            "description": "If present, passes custom options to `@electron/get`"
        },
        "electronVersion": {
            "description": "The Electron version with which the app is built (without the leading 'v') - for example, 1.4.13",
            "type": "string"
        },
        "electronZipDir": {
            "description": "The local path to a directory containing Electron ZIP files for Electron Packager to unzip, instead of downloading them. The ZIP filenames should be in the same format as the ones downloaded from the Electron releases site.\nNote: Setting this option prevents the download sub-options from being used, as the functionality gets skipped over.",
            "type": "string"
        },
        "executableName": {
            "description": "The name of the executable file, sans file extension. Defaults to the value for the name parameter",
            "type": "string"
        },
        "extendInfo": {
            "anyOf": [
                {
                    "additionalProperties": {
                    },
                    "type": "object"
                },
                {
                    "type": "string"
                }
            ],
            "description": "When the value is a String, the filename of a plist file. Its contents are added to the app's plist.\nWhen the value is an Object, an already-parsed plist data structure that is merged into the app's plist."
        },
        "extraResource": {
            "anyOf": [
                {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                {
                    "type": "string"
                }
            ],
            "description": "One or more files to be copied directly into the app's Contents/Resources directory for OS X target platforms, and the resources directory for other target platforms."
        },
        "helperBundleId": {
            "description": "The bundle identifier to use in the application helper's plist.",
            "type": "string"
        },
        "icon": {
            "description": "The local path to the icon file, if the target platform supports setting embedding an icon.",
            "type": "string"
        },
        "ignore": {
            "anyOf": [
                {
                    "$ref": "#/definitions/RegExp"
                },
                {
                    "type": "string"
                },
                {
                    "additionalProperties": false,
                    "type": "object"
                },
                {
                    "items": {
                        "$ref": "#/definitions/RegExp"
                    },
                    "type": "array"
                },
                {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            ],
            "description": "One or more additional regular expression patterns which specify which files to ignore when copying files to create the app bundle(s).\nThe regular expressions are matched against the absolute path of a given file/directory to be copied."
        },
        "ignoreSourceMap": {
            "description": "Ignore source map file while creating the app bundle(s).",
            "type": "boolean"
        },
        "osxNotarize": {
            "$ref": "#/definitions/Pick<NotarizeStartOptions,\"appleId\"|\"appleIdPassword\"|\"ascProvider\">",
            "description": "If present, notarizes OS X target apps when the host platform is OS X and XCode is installed."
        },
        "osxSign": {
            "anyOf": [
                {
                    "$ref": "#/definitions/ElectronOsXSignOptions"
                },
                {
                    "type": "boolean"
                }
            ],
            "description": "If present, signs OS X target apps when the host platform is OS X and XCode is installed."
        },
        "out": {
            "description": "The output directory.",
            "type": "string"
        },
        "overwrite": {
            "description": "Whether to replace an already existing output directory for a given platform (true) or skip recreating it (false).",
            "type": "boolean"
        },
        "platform": {
            "$ref": "#/definitions/electronPackager.platform",
            "description": "The target platform(s) to build for. Not required if the all option is set."
        },
        "prebuiltAsar": {
            "description": "The path to a prebuilt ASAR file.",
            "type": "string"
        },
        "protocols": {
            "description": "The URL protocol schemes the app supports.",
            "items": {
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "schemes": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "type": "array"
        },
        "prune": {
            "description": "Runs the package manager command to remove all of the packages specified in the devDependencies section of package.json from the outputted Electron app.",
            "type": "boolean"
        },
        "quiet": {
            "description": "If true, disables printing informational and warning messages to the console when packaging the application. This does not disable errors.",
            "type": "boolean"
        },
        "tmpdir": {
            "anyOf": [
                {
                    "enum": [
                        false
                    ],
                    "type": "boolean"
                },
                {
                    "type": "string"
                }
            ],
            "description": "The base directory to use as a temp directory. Set to false to disable use of a temporary directory."
        },
        "win32metadata": {
            "$ref": "#/definitions/Win32Metadata",
            "description": "Windows targets only"
        },
        "$schema": {
            "type": "string"
        }
    },
    "type": "object"
}